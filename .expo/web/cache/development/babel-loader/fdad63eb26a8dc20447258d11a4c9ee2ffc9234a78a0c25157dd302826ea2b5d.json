{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerView;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _elements = require(\"@react-navigation/elements\");\nvar _native = require(\"@react-navigation/native\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _BackHandler = _interopRequireDefault(require(\"react-native-web/dist/exports/BackHandler\"));\nvar _I18nManager = _interopRequireDefault(require(\"react-native-web/dist/exports/I18nManager\"));\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\nvar Reanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\nvar _DrawerPositionContext = _interopRequireDefault(require(\"../utils/DrawerPositionContext\"));\nvar _DrawerStatusContext = _interopRequireDefault(require(\"../utils/DrawerStatusContext\"));\nvar _getDrawerStatusFromState = _interopRequireDefault(require(\"../utils/getDrawerStatusFromState\"));\nvar _DrawerContent = _interopRequireDefault(require(\"./DrawerContent\"));\nvar _DrawerToggleButton = _interopRequireDefault(require(\"./DrawerToggleButton\"));\nvar _GestureHandler = require(\"./GestureHandler\");\nvar _ScreenFallback = require(\"./ScreenFallback\");\nvar _excluded = [\"navigation\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = _Platform.default.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView != null ? _GestureHandler.GestureHandlerRootView : _View.default;\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    defaultStatus = _ref2.defaultStatus,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(_DrawerContent.default, props);\n    } : _ref2$drawerContent,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? _Platform.default.OS === 'web' || _Platform.default.OS === 'android' || _Platform.default.OS === 'ios' : _ref2$detachInactiveS,\n    _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n    useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem;\n  var legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  var Drawer = useLegacyImplementation ? require(\"./legacy/Drawer\").default : require(\"./modern/Drawer\").default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n    _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n    drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n    _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n    drawerPosition = _descriptors$focusedR3 === void 0 ? _I18nManager.default.getConstants().isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n    _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n    drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n    drawerStyle = _descriptors$focusedR.drawerStyle,\n    _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n    drawerType = _descriptors$focusedR5 === void 0 ? _Platform.default.select({\n      ios: 'slide',\n      default: 'front'\n    }) : _descriptors$focusedR5,\n    gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n    _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n    keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n    _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n    overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n    _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n    swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n    _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n    swipeEnabled = _descriptors$focusedR9 === void 0 ? _Platform.default.OS !== 'web' && _Platform.default.OS !== 'windows' && _Platform.default.OS !== 'macos' : _descriptors$focusedR9,\n    _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n    swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10,\n    overlayAccessibilityLabel = _descriptors$focusedR.overlayAccessibilityLabel;\n  var _React$useState = React.useState([focusedRouteKey]),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat((0, _toConsumableArray2.default)(loaded), [focusedRouteKey]));\n  }\n  var dimensions = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();\n  var _useTheme = (0, _native.useTheme)(),\n    colors = _useTheme.colors;\n  var drawerStatus = (0, _getDrawerStatusFromState.default)(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(Object.assign({}, _native.DrawerActions.openDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(Object.assign({}, _native.DrawerActions.closeDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n    var subscription = _BackHandler.default.addEventListener('hardwareBackPress', handleHardwareBack);\n    if (_Platform.default.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return function () {\n      subscription.remove();\n      if (_Platform.default.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(_DrawerPositionContext.default.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(_ScreenFallback.MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$l = _descriptor$options.lazy,\n        lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n        unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options2 = descriptor.options,\n        freezeOnBlur = _descriptor$options2.freezeOnBlur,\n        _descriptor$options2$ = _descriptor$options2.header,\n        header = _descriptor$options2$ === void 0 ? function (_ref3) {\n          var _options$headerLeft;\n          var layout = _ref3.layout,\n            options = _ref3.options;\n          return React.createElement(_elements.Header, _extends({}, options, {\n            layout: layout,\n            title: (0, _elements.getHeaderTitle)(options, route.name),\n            headerLeft: (_options$headerLeft = options.headerLeft) != null ? _options$headerLeft : function (props) {\n              return React.createElement(_DrawerToggleButton.default, props);\n            }\n          }));\n        } : _descriptor$options2$,\n        headerShown = _descriptor$options2.headerShown,\n        headerStatusBarHeight = _descriptor$options2.headerStatusBarHeight,\n        headerTransparent = _descriptor$options2.headerTransparent,\n        sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(_ScreenFallback.MaybeScreen, {\n        key: route.key,\n        style: [_StyleSheet.default.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens,\n        freezeOnBlur: freezeOnBlur\n      }, React.createElement(_elements.Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: headerShown,\n        headerStatusBarHeight: headerStatusBarHeight,\n        headerTransparent: headerTransparent,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n  return React.createElement(_DrawerStatusContext.default.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    overlayAccessibilityLabel: overlayAccessibilityLabel,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: _StyleSheet.default.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: _StyleSheet.default.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\nfunction DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n    rest = (0, _objectWithoutProperties2.default)(_ref4, _excluded);\n  return React.createElement(_elements.SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nvar styles = _StyleSheet.default.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["_elements","require","_native","React","_interopRequireWildcard","_BackHandler","_interopRequireDefault","_I18nManager","_Platform","_StyleSheet","_View","Reanimated","_reactNativeSafeAreaContext","_DrawerPositionContext","_DrawerStatusContext","_getDrawerStatusFromState","_DrawerContent","_DrawerToggleButton","_GestureHandler","_ScreenFallback","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getDefaultDrawerWidth","_ref","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","View","DrawerViewBase","_ref2","_Reanimated$isConfigu","state","navigation","descriptors","defaultStatus","_ref2$drawerContent","drawerContent","props","createElement","DrawerContent","_ref2$detachInactiveS","detachInactiveScreens","_ref2$useLegacyImplem","useLegacyImplementation","isConfigured","legacyImplemenationNotAvailable","abs","undefined","Error","Drawer","focusedRouteKey","routes","index","_descriptors$focusedR","options","_descriptors$focusedR2","drawerHideStatusBarOnOpen","_descriptors$focusedR3","drawerPosition","I18nManager","getConstants","isRTL","_descriptors$focusedR4","drawerStatusBarAnimation","drawerStyle","_descriptors$focusedR5","drawerType","select","ios","gestureHandlerProps","_descriptors$focusedR6","keyboardDismissMode","_descriptors$focusedR7","overlayColor","_descriptors$focusedR8","swipeEdgeWidth","_descriptors$focusedR9","swipeEnabled","_descriptors$focusedR10","swipeMinDistance","overlayAccessibilityLabel","_React$useState","useState","_React$useState2","_slicedToArray2","loaded","setLoaded","includes","concat","_toConsumableArray2","dimensions","useSafeAreaFrame","_useTheme","useTheme","colors","drawerStatus","getDrawerStatusFromState","handleDrawerOpen","useCallback","dispatch","assign","DrawerActions","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","_document","_document$body","_document$body$addEve","document","body","remove","_document2","_document2$body","_document2$body$remov","removeEventListener","renderDrawerContent","DrawerPositionContext","Provider","value","renderSceneContent","MaybeScreenContainer","enabled","hasTwoStates","style","styles","content","map","route","descriptor","_descriptor$options","_descriptor$options$l","lazy","unmountOnBlur","_descriptor$options2","freezeOnBlur","_descriptor$options2$","header","_ref3","_options$headerLeft","layout","Header","_extends","title","getHeaderTitle","name","headerLeft","DrawerToggleButton","headerShown","headerStatusBarHeight","headerTransparent","sceneContainerStyle","MaybeScreen","StyleSheet","absoluteFill","zIndex","visible","Screen","focused","render","DrawerStatusContext","open","onOpen","onClose","swipeVelocityThreshold","swipeDistanceThreshold","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","DrawerView","_ref4","rest","_objectWithoutProperties2","SafeAreaProviderCompat","create","flex"],"sources":["C:\\Users\\acer\\OneDrive\\Desktop\\cab-main\\node_modules\\@react-navigation\\drawer\\src\\views\\DrawerView.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Reanimated 2 is not configured\n  // @ts-expect-error: the type definitions are incomplete\n  useLegacyImplementation = !Reanimated.isConfigured?.(),\n}: Props) {\n  // Reanimated v3 dropped legacy v1 syntax\n  const legacyImplemenationNotAvailable =\n    require('react-native-reanimated').abs === undefined;\n\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error(\n      'The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.'\n    );\n  }\n\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n    overlayAccessibilityLabel,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            freezeOnBlur,\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            headerShown,\n            headerStatusBarHeight,\n            headerTransparent,\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n              freezeOnBlur={freezeOnBlur}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={headerShown}\n                headerStatusBarHeight={headerStatusBarHeight}\n                headerTransparent={headerTransparent}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        overlayAccessibilityLabel={overlayAccessibilityLabel}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}