{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _I18nManager = _interopRequireDefault(require(\"react-native-web/dist/exports/I18nManager\"));\nvar _InteractionManager = _interopRequireDefault(require(\"react-native-web/dist/exports/InteractionManager\"));\nvar _Keyboard = _interopRequireDefault(require(\"react-native-web/dist/exports/Keyboard\"));\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\nvar _StatusBar = _interopRequireDefault(require(\"react-native-web/dist/exports/StatusBar\"));\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\nvar _DrawerProgressContext = _interopRequireDefault(require(\"../../utils/DrawerProgressContext\"));\nvar _GestureHandler = require(\"../GestureHandler\");\nvar _Overlay = _interopRequireDefault(require(\"./Overlay\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Clock = _reactNativeReanimated.default.Clock,\n  Value = _reactNativeReanimated.default.Value,\n  onChange = _reactNativeReanimated.default.onChange,\n  clockRunning = _reactNativeReanimated.default.clockRunning,\n  startClock = _reactNativeReanimated.default.startClock,\n  stopClock = _reactNativeReanimated.default.stopClock,\n  spring = _reactNativeReanimated.default.spring,\n  abs = _reactNativeReanimated.default.abs,\n  add = _reactNativeReanimated.default.add,\n  and = _reactNativeReanimated.default.and,\n  block = _reactNativeReanimated.default.block,\n  call = _reactNativeReanimated.default.call,\n  cond = _reactNativeReanimated.default.cond,\n  divide = _reactNativeReanimated.default.divide,\n  eq = _reactNativeReanimated.default.eq,\n  event = _reactNativeReanimated.default.event,\n  greaterThan = _reactNativeReanimated.default.greaterThan,\n  lessThan = _reactNativeReanimated.default.lessThan,\n  max = _reactNativeReanimated.default.max,\n  min = _reactNativeReanimated.default.min,\n  multiply = _reactNativeReanimated.default.multiply,\n  neq = _reactNativeReanimated.default.neq,\n  or = _reactNativeReanimated.default.or,\n  set = _reactNativeReanimated.default.set,\n  sub = _reactNativeReanimated.default.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new _reactNativeReanimated.default.Value(0);\nvar ANIMATED_ONE = new _reactNativeReanimated.default.Value(1);\nvar DrawerView = function (_React$Component) {\n  (0, _inherits2.default)(DrawerView, _React$Component);\n  var _super = _createSuper(DrawerView);\n  function DrawerView() {\n    var _this;\n    (0, _classCallCheck2.default)(this, DrawerView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        _InteractionManager.default.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = _InteractionManager.default.createInteractionHandle();\n      }\n    };\n    _this.getDrawerWidth = function () {\n      var _this$props = _this.props,\n        drawerStyle = _this$props.drawerStyle,\n        dimensions = _this$props.dimensions;\n      var _ref4 = _StyleSheet.default.flatten(drawerStyle) || {},\n        _ref4$width = _ref4.width,\n        width = _ref4$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref4$width;\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n      return typeof width === 'number' ? width : 0;\n    };\n    _this.clock = new Clock();\n    _this.isDrawerTypeFront = new Value(_this.props.drawerType === 'front' ? TRUE : FALSE);\n    _this.isOpen = new Value(_this.props.open ? TRUE : FALSE);\n    _this.nextIsOpen = new Value(UNSET);\n    _this.isSwiping = new Value(FALSE);\n    _this.initialDrawerWidth = _this.getDrawerWidth();\n    _this.gestureState = new Value(_GestureHandler.GestureState.UNDETERMINED);\n    _this.touchX = new Value(0);\n    _this.velocityX = new Value(0);\n    _this.gestureX = new Value(0);\n    _this.offsetX = new Value(0);\n    _this.position = new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0);\n    _this.containerWidth = new Value(_this.props.dimensions.width);\n    _this.drawerWidth = new Value(_this.initialDrawerWidth);\n    _this.drawerOpacity = new Value(_this.props.drawerType === 'permanent' ? 1 : 0);\n    _this.drawerPosition = new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    _this.touchDistanceFromDrawer = cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0);\n    _this.swipeDistanceThreshold = new Value(_this.props.swipeDistanceThreshold);\n    _this.swipeVelocityThreshold = new Value(_this.props.swipeVelocityThreshold);\n    _this.currentOpenValue = _this.props.open;\n    _this.isStatusBarHidden = false;\n    _this.manuallyTriggerSpring = new Value(FALSE);\n    _this.transitionTo = function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, Object.assign({}, SPRING_CONFIG, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref5 = (0, _slicedToArray2.default)(_ref, 1),\n          value = _ref5[0];\n        var open = Boolean(value);\n        _this.handleEndInteraction();\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    };\n    _this.dragX = block([onChange(_this.isOpen, call([_this.isOpen], function (_ref2) {\n      var _ref6 = (0, _slicedToArray2.default)(_ref2, 1),\n        value = _ref6[0];\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n        _this.pendingOpenValue = open;\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref3) {\n      var _ref7 = (0, _slicedToArray2.default)(_ref3, 1),\n        value = _ref7[0];\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          _Keyboard.default.dismiss();\n        }\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, _GestureHandler.GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, _GestureHandler.GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]);\n    _this.translateX = cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0));\n    _this.progress = cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth)));\n    _this.handleGestureEvent = event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]);\n    _this.handleGestureStateChange = event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]);\n    _this.handleContainerLayout = function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    };\n    _this.handleDrawerLayout = function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      _this.toggleDrawer(_this.props.open);\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    };\n    _this.toggleDrawer = function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n        _this.currentOpenValue = open;\n      }\n    };\n    _this.toggleStatusBar = function (hidden) {\n      var _this$props2 = _this.props,\n        hideStatusBar = _this$props2.hideStatusBarOnOpen,\n        statusBarAnimation = _this$props2.statusBarAnimation;\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        _StatusBar.default.setHidden(hidden, statusBarAnimation);\n      }\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(DrawerView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n        open = _this$props3.open,\n        drawerPosition = _this$props3.drawerPosition,\n        drawerType = _this$props3.drawerType,\n        swipeDistanceThreshold = _this$props3.swipeDistanceThreshold,\n        swipeVelocityThreshold = _this$props3.swipeVelocityThreshold,\n        hideStatusBar = _this$props3.hideStatusBarOnOpen;\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n      this.pendingOpenValue = undefined;\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n      }\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props4 = this.props,\n        open = _this$props4.open,\n        swipeEnabled = _this$props4.swipeEnabled,\n        drawerPosition = _this$props4.drawerPosition,\n        drawerType = _this$props4.drawerType,\n        swipeEdgeWidth = _this$props4.swipeEdgeWidth,\n        drawerStyle = _this$props4.drawerStyle,\n        overlayStyle = _this$props4.overlayStyle,\n        renderDrawerContent = _this$props4.renderDrawerContent,\n        renderSceneContent = _this$props4.renderSceneContent,\n        gestureHandlerProps = _this$props4.gestureHandlerProps,\n        overlayAccessibilityLabel = _this$props4.overlayAccessibilityLabel;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? _I18nManager.default.getConstants().isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : _I18nManager.default.getConstants().isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(_DrawerProgressContext.default.Provider, {\n        value: progress\n      }, React.createElement(_GestureHandler.PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && swipeEnabled\n      }, gestureHandlerProps), React.createElement(_reactNativeReanimated.default.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(_reactNativeReanimated.default.View, {\n        style: [styles.content, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: contentTranslateX\n          }]\n        }]\n      }, React.createElement(_View.default, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, renderSceneContent()), drawerType === 'permanent' ? null : React.createElement(_Overlay.default, {\n        progress: progress,\n        onPress: function onPress() {\n          return _this2.toggleDrawer(false);\n        },\n        accessibilityLabel: overlayAccessibilityLabel,\n        style: overlayStyle,\n        accessibilityElementsHidden: !isOpen,\n        importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n      })), React.createElement(_reactNativeReanimated.default.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(_reactNativeReanimated.default.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(_reactNativeReanimated.default.View, {\n        removeClippedSubviews: _Platform.default.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent()))));\n    }\n  }]);\n  return DrawerView;\n}(React.Component);\nexports.default = DrawerView;\nvar styles = _StyleSheet.default.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: Object.assign({\n    flex: 1\n  }, _Platform.default.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"names":["React","_interopRequireWildcard","require","_I18nManager","_interopRequireDefault","_InteractionManager","_Keyboard","_Platform","_StatusBar","_StyleSheet","_View","_reactNativeReanimated","_DrawerProgressContext","_GestureHandler","_Overlay","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","Clock","Animated","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","_React$Component","_inherits2","_super","_this","_classCallCheck2","_len","length","args","Array","_key","concat","handleEndInteraction","interactionHandle","undefined","InteractionManager","clearInteractionHandle","handleStartInteraction","createInteractionHandle","getDrawerWidth","_this$props","props","drawerStyle","dimensions","_ref4","StyleSheet","flatten","_ref4$width","width","endsWith","percentage","Number","replace","isFinite","clock","isDrawerTypeFront","drawerType","isOpen","open","nextIsOpen","isSwiping","initialDrawerWidth","gestureState","GestureState","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","drawerPosition","containerWidth","drawerWidth","drawerOpacity","touchDistanceFromDrawer","swipeDistanceThreshold","swipeVelocityThreshold","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","assign","_ref","_ref5","_slicedToArray2","value","toggleDrawer","dragX","_ref2","_ref6","onOpen","onClose","pendingOpenValue","forceUpdate","_ref3","_ref7","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","ACTIVE","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleContainerLayout","setValue","layout","handleDrawerLayout","requestAnimationFrame","hidden","_this$props2","hideStatusBar","hideStatusBarOnOpen","statusBarAnimation","StatusBar","setHidden","_createClass2","componentDidUpdate","prevProps","_this$props3","componentWillUnmount","render","_this2","_this$props4","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","overlayAccessibilityLabel","isRight","contentTranslateX","drawerTranslateX","I18nManager","getConstants","isRTL","offset","hitSlop","right","left","createElement","DrawerProgressContext","Provider","PanGestureHandler","_extends","activeOffsetX","failOffsetY","onGestureEvent","onHandlerStateChange","enabled","View","onLayout","style","styles","main","flexDirection","content","transform","accessibilityElementsHidden","importantForAccessibility","Overlay","onPress","accessibilityLabel","Code","exec","removeClippedSubviews","Platform","OS","container","opacity","nonPermanent","zIndex","Component","exports","create","backgroundColor","maxWidth","top","bottom","flex","select","web","overflow"],"sources":["C:\\Users\\acer\\OneDrive\\Desktop\\cab-main\\node_modules\\@react-navigation\\drawer\\src\\views\\legacy\\Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\nexport default class DrawerView extends React.Component<DrawerProps> {\n  componentDidUpdate(prevProps: DrawerProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\n      this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n      overlayAccessibilityLabel,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.getConstants().isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.getConstants().isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && swipeEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !isRight\n                    ? 'row-reverse'\n                    : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: contentTranslateX }],\n                },\n              ]}\n            >\n              <View\n                accessibilityElementsHidden={\n                  isOpen && drawerType !== 'permanent'\n                }\n                importantForAccessibility={\n                  isOpen && drawerType !== 'permanent'\n                    ? 'no-hide-descendants'\n                    : 'auto'\n                }\n                style={styles.content}\n              >\n                {renderSceneContent()}\n              </View>\n              {\n                // Disable overlay if sidebar is permanent\n                drawerType === 'permanent' ? null : (\n                  <Overlay\n                    progress={progress}\n                    onPress={() => this.toggleDrawer(false)}\n                    accessibilityLabel={overlayAccessibilityLabel}\n                    style={overlayStyle as any}\n                    accessibilityElementsHidden={!isOpen}\n                    importantForAccessibility={\n                      isOpen ? 'auto' : 'no-hide-descendants'\n                    }\n                  />\n                )\n              }\n            </Animated.View>\n            <Animated.Code\n              // This is needed to make sure that container width updates with `setValue`\n              // Without this, it won't update when not used in styles\n              exec={this.containerWidth}\n            />\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                },\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    isRight\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      isRight ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent()}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}